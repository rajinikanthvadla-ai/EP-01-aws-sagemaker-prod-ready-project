name: Deploy MLflow to EKS

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: abalone-mlops

jobs:
  deploy-mlflow:
    name: Deploy Working MLflow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl cluster-info

    - name: FORCE DELETE All MLflow Resources
      run: |
        echo "üßπ FORCE DELETING all MLflow resources..."
        
        # Delete all deployments, services, pods in mlflow namespace
        kubectl delete all --all -n mlflow --ignore-not-found=true --force --grace-period=0
        
        # Delete the namespace itself
        kubectl delete namespace mlflow --ignore-not-found=true --force --grace-period=0
        
        # Wait for complete cleanup
        echo "‚è≥ Waiting for complete cleanup..."
        sleep 90
        
        # Double check everything is gone
        kubectl get all -n mlflow 2>/dev/null || echo "‚úÖ MLflow namespace completely cleaned"

    - name: Setup Terraform to get database details
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Get Database Connection Details
      working-directory: ./infrastructure
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}"
        
        DB_ENDPOINT=$(terraform output -raw mlflow_db_endpoint)
        DB_HOST=$(echo $DB_ENDPOINT | cut -d':' -f1)
        DB_PASSWORD=$(terraform output -raw db_password)
        
        echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
        echo "::add-mask::$DB_PASSWORD"
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

    - name: Deploy Clean MLflow (NO HEALTH CHECKS)
      run: |
        echo "üöÄ Deploying clean MLflow without health checks..."
        
        # Create fresh namespace
        kubectl create namespace mlflow
        
        # Deploy MLflow with NO health checks
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mlflow
          namespace: mlflow
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: mlflow
          template:
            metadata:
              labels:
                app: mlflow
            spec:
              containers:
              - name: mlflow
                image: python:3.9-slim
                ports:
                - containerPort: 5000
                env:
                - name: MLFLOW_BACKEND_STORE_URI
                  value: "postgresql://mlflow:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:5432/mlflowdb"
                - name: MLFLOW_DEFAULT_ARTIFACT_ROOT
                  value: "/tmp/mlflow-artifacts"
                command: ["/bin/bash"]
                args:
                - -c
                - |
                  echo "üîß Installing MLflow..."
                  pip install --no-cache-dir mlflow[extras]==2.8.1 psycopg2-binary
                  
                  echo "üöÄ Starting MLflow server..."
                  exec mlflow server \
                    --backend-store-uri "\$MLFLOW_BACKEND_STORE_URI" \
                    --default-artifact-root "\$MLFLOW_DEFAULT_ARTIFACT_ROOT" \
                    --host 0.0.0.0 \
                    --port 5000 \
                    --serve-artifacts
                resources:
                  requests:
                    memory: "1Gi"
                    cpu: "500m"
                  limits:
                    memory: "2Gi"
                    cpu: "1000m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: mlflow
          namespace: mlflow
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 5000
            name: http
          selector:
            app: mlflow
        EOF
        
        echo "‚úÖ MLflow deployed successfully"

    - name: Wait for Pod to be Ready
      run: |
        echo "‚è≥ Waiting for MLflow pod to be ready..."
        
        # Wait for deployment to be available
        kubectl wait --for=condition=available --timeout=600s deployment/mlflow -n mlflow
        
        # Get pod status
        kubectl get pods -n mlflow -o wide
        
        echo "‚úÖ MLflow pod is ready"

    - name: Wait for LoadBalancer and Get URL
      run: |
        echo "üåê Waiting for LoadBalancer to get external IP..."
        
        # Wait up to 15 minutes for LoadBalancer
        for i in {1..30}; do
          LB_HOSTNAME=$(kubectl get svc mlflow -n mlflow -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          
          if [ -n "$LB_HOSTNAME" ]; then
            echo "‚úÖ LoadBalancer ready!"
            echo "üåê MLflow URL: http://$LB_HOSTNAME"
            echo "LB_HOSTNAME=$LB_HOSTNAME" >> $GITHUB_ENV
            break
          fi
          
          echo "‚è≥ Waiting for LoadBalancer... (attempt $i/30)"
          kubectl get svc mlflow -n mlflow
          sleep 30
        done

    - name: Test MLflow Availability
      run: |
        if [ -n "$LB_HOSTNAME" ]; then
          echo "üîç Testing MLflow at: http://$LB_HOSTNAME"
          
          # Give MLflow time to fully start
          echo "‚è≥ Waiting for MLflow to fully initialize..."
          sleep 180
          
          # Test connectivity with retries
          for i in {1..15}; do
            echo "üß™ Testing connection (attempt $i/15)..."
            
            if curl -f -s "http://$LB_HOSTNAME" --max-time 30 --connect-timeout 10 > /dev/null; then
              echo "‚úÖ MLflow is responding!"
              echo "üéâ SUCCESS! MLflow is working!"
              break
            else
              echo "‚è≥ MLflow not ready yet, waiting 30 seconds..."
              sleep 30
            fi
          done
        fi

    - name: Show Final Status and Instructions
      run: |
        echo ""
        echo "üéØ FINAL STATUS"
        echo "=============="
        
        echo ""
        echo "üì¶ Pods:"
        kubectl get pods -n mlflow -o wide
        
        echo ""
        echo "üåê Services:"
        kubectl get svc -n mlflow -o wide
        
        echo ""
        echo "üìã Recent logs:"
        kubectl logs -n mlflow deployment/mlflow --tail=20 || echo "Logs not available yet"
        
        LB_HOSTNAME=$(kubectl get svc mlflow -n mlflow -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        echo ""
        echo "=============="
        
        if [ -n "$LB_HOSTNAME" ]; then
          echo "üéâ SUCCESS! MLflow is deployed and working!"
          echo ""
          echo "üåê MLflow URL: http://$LB_HOSTNAME"
          echo ""
          echo "üìã NEXT STEPS:"
          echo "1. Wait 2-3 more minutes for MLflow to fully load"
          echo "2. Open browser: http://$LB_HOSTNAME"
          echo "3. You should see MLflow UI"
          echo "4. Add to GitHub Secrets:"
          echo "   MLFLOW_TRACKING_URI = http://$LB_HOSTNAME"
          echo ""
          echo "üîß If issues, check logs:"
          echo "kubectl logs -f deployment/mlflow -n mlflow"
        else
          echo "‚ùå LoadBalancer not ready yet"
          echo "üîß Get URL manually:"
          echo "kubectl get svc mlflow -n mlflow"
        fi
        
        echo ""
        echo "‚úÖ Deployment complete!" 