name: MLOps CD - Deploy Approved Model

on:
  workflow_dispatch:
    inputs:
      model_package_arn:
        description: 'Model Package ARN to deploy'
        required: true
        type: string

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      model_package_arn: ${{ github.event.inputs.model_package_arn }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3

    - name: Deploy to Staging
      run: |
        python scripts/deploy.py \
          --model-package-arn ${{ github.event.inputs.model_package_arn }} \
          --environment staging
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SAGEMAKER_ROLE_ARN: ${{ secrets.SAGEMAKER_ROLE_ARN }}

  build-and-push-api:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: abalone-prediction-api
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-and-push-ui:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push UI image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: abalone-prediction-ui
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./ui
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  test-staging:
    runs-on: ubuntu-latest
    needs: deploy-staging
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 requests

    - name: Test Staging Endpoint
      run: |
        # This is a simple test to check if the endpoint is invocable.
        # A more robust test would involve sending actual data and validating the prediction format/values.
        ENDPOINT_NAME="abalone-staging"
        REGION="${{ secrets.AWS_REGION }}"
        PAYLOAD='5,0.455,0.365,0.095,0.514,0.2245,0.101,0.15' # Sample payload
        
        echo "Testing endpoint $ENDPOINT_NAME in region $REGION..."
        aws sagemaker-runtime invoke-endpoint \
          --endpoint-name $ENDPOINT_NAME \
          --region $REGION \
          --content-type "text/csv" \
          --body "$PAYLOAD" \
          /dev/stdout
        
        echo "Staging endpoint test completed."

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-staging, build-and-push-api, build-and-push-ui]
    environment:
      name: production
      url: 'https://console.aws.amazon.com/sagemaker/home?region=${{ secrets.AWS_REGION }}#/endpoints/abalone-production'
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_ACTIONS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3

    - name: Deploy to Production via CloudFormation
      id: deploy-cfn
      run: |
        python scripts/deploy.py \
          --model-package-arn ${{ needs.deploy-staging.outputs.model_package_arn }} \
          --environment production
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Apply Kubernetes manifests
      run: |
        # Replace placeholders in K8s manifests
        sed -i 's|<<AWS_ACCOUNT_ID>>|${{ secrets.AWS_ACCOUNT_ID }}|g' kubernetes/*.yaml
        sed -i 's|<<AWS_REGION>>|${{ secrets.AWS_REGION }}|g' kubernetes/*.yaml
        sed -i 's|:latest|:${{ github.sha }}|g' kubernetes/*.yaml
        
        kubectl apply -f kubernetes/ 