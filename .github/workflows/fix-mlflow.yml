name: Fix MLflow UI Loading Issue

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: abalone-mlops

jobs:
  fix-mlflow:
    name: Fix MLflow UI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl cluster-info

    - name: Clean Up Existing MLflow
      run: |
        echo "🧹 Cleaning up existing MLflow deployment..."
        kubectl delete deployment mlflow -n mlflow --ignore-not-found=true
        kubectl delete service mlflow -n mlflow --ignore-not-found=true
        kubectl delete namespace mlflow --ignore-not-found=true
        
        echo "⏳ Waiting for cleanup..."
        sleep 30

    - name: Setup Terraform to get outputs
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false

    - name: Get Database Connection Details
      working-directory: ./infrastructure
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
          -backend-config="key=terraform.tfstate" \
          -backend-config="region=${{ secrets.AWS_REGION }}"
        
        DB_ENDPOINT=$(terraform output -raw mlflow_db_endpoint)
        DB_HOST=$(echo $DB_ENDPOINT | cut -d':' -f1)
        DB_PASSWORD=$(terraform output -raw db_password)
        
        echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
        echo "::add-mask::$DB_PASSWORD"
        echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

    - name: Create Fixed MLflow Deployment
      run: |
        echo "🚀 Creating fixed MLflow deployment..."
        
        # Create namespace
        kubectl create namespace mlflow
        
        # Create a working MLflow deployment
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: mlflow
          namespace: mlflow
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: mlflow
          template:
            metadata:
              labels:
                app: mlflow
            spec:
              containers:
              - name: mlflow
                image: python:3.9-slim
                ports:
                - containerPort: 5000
                env:
                - name: MLFLOW_BACKEND_STORE_URI
                  value: "postgresql://mlflow:${{ env.DB_PASSWORD }}@${{ env.DB_HOST }}:5432/mlflowdb"
                - name: MLFLOW_DEFAULT_ARTIFACT_ROOT
                  value: "/tmp/mlflow"
                command:
                - /bin/bash
                - -c
                - |
                  pip install mlflow[extras]==2.8.1 psycopg2-binary
                  mlflow server \
                    --backend-store-uri \$MLFLOW_BACKEND_STORE_URI \
                    --default-artifact-root \$MLFLOW_DEFAULT_ARTIFACT_ROOT \
                    --host 0.0.0.0 \
                    --port 5000 \
                    --serve-artifacts
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 60
                  periodSeconds: 30
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: mlflow
          namespace: mlflow
        spec:
          type: LoadBalancer
          ports:
          - port: 80
            targetPort: 5000
            protocol: TCP
          selector:
            app: mlflow
        EOF

    - name: Wait for MLflow to be Ready
      run: |
        echo "⏳ Waiting for MLflow to be ready..."
        kubectl rollout status deployment/mlflow -n mlflow --timeout=300s
        
        echo "✅ MLflow deployment is ready"

    - name: Wait for LoadBalancer
      run: |
        echo "🌐 Waiting for LoadBalancer to get external IP..."
        
        # Wait up to 5 minutes for LoadBalancer
        for i in {1..10}; do
          LB_HOSTNAME=$(kubectl get svc mlflow -n mlflow -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          
          if [ -n "$LB_HOSTNAME" ]; then
            echo "✅ LoadBalancer ready: $LB_HOSTNAME"
            break
          fi
          
          echo "⏳ Waiting for LoadBalancer... (attempt $i/10)"
          sleep 30
        done

    - name: Test MLflow Health
      run: |
        echo "🔍 Testing MLflow health..."
        
        LB_HOSTNAME=$(kubectl get svc mlflow -n mlflow -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ -n "$LB_HOSTNAME" ]; then
          echo "🌐 Testing MLflow at: http://$LB_HOSTNAME"
          
          # Test health endpoint
          for i in {1..5}; do
            if curl -f "http://$LB_HOSTNAME/health" --max-time 10; then
              echo "✅ MLflow health check passed"
              break
            else
              echo "⏳ Health check failed, retrying... (attempt $i/5)"
              sleep 30
            fi
          done
        fi

    - name: Get Final Status
      run: |
        echo "📊 FINAL STATUS:"
        echo ""
        echo "Pods:"
        kubectl get pods -n mlflow -o wide
        echo ""
        echo "Services:"
        kubectl get svc -n mlflow -o wide
        echo ""
        echo "Recent logs:"
        kubectl logs -n mlflow deployment/mlflow --tail=20
        echo ""
        
        LB_HOSTNAME=$(kubectl get svc mlflow -n mlflow -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ -n "$LB_HOSTNAME" ]; then
          echo "🎉 SUCCESS! MLflow is ready!"
          echo "🌐 MLflow URL: http://$LB_HOSTNAME"
          echo ""
          echo "📋 Test the UI by visiting: http://$LB_HOSTNAME"
          echo "📋 Health endpoint: http://$LB_HOSTNAME/health"
        else
          echo "❌ LoadBalancer not ready yet. Wait 2-3 more minutes and check:"
          echo "kubectl get svc mlflow -n mlflow"
        fi 